<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Queue队列实现</title>
    <url>/2020/02/10/Queue%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h3 id="队列实现思路"><a href="#队列实现思路" class="headerlink" title="队列实现思路"></a>队列实现思路</h3><p>队列与动态数组非常相似，需要在头部和尾部进行操作，所以使用双向链表中的函数即可以实现。</p>
<h3 id="使用双向链表实现队列"><a href="#使用双向链表实现队列" class="headerlink" title="使用双向链表实现队列"></a>使用双向链表实现队列</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyQueue</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> MyList&lt;E&gt; queue = <span class="keyword">new</span> MyLinkedList&lt;&gt;();</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> queue.size();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> queue.isEmpty();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//入队，也就是在链表最后面增加一个元素</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enQueue</span><span class="params">(E element)</span> </span>&#123;</span><br><span class="line">		queue.add(element);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//出队，由于队列是先进先出的，所以删除双向链表中的第一个元素</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> E <span class="title">deQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> queue.remove(<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> E <span class="title">front</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> queue.get(<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		queue.clear();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<h3 id="补充：双向链表"><a href="#补充：双向链表" class="headerlink" title="补充：双向链表"></a>补充：双向链表</h3><p>该双向链表是在之前的单链表基础上改进而成的，成员变量中增加了Node<E> last; 构造函数中增加了Node<E> prev;,并且类中各个方法改进而成的。（可参照之前的博客文章）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLinkedList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">MyAbstractList</span>&lt;<span class="title">E</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> Node&lt;E&gt; first;</span><br><span class="line">	<span class="keyword">private</span> Node&lt;E&gt; last;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">		</span><br><span class="line">		E element;</span><br><span class="line">		Node&lt;E&gt; prev;</span><br><span class="line">		Node&lt;E&gt; next;</span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">this</span>.element = element;</span><br><span class="line">			<span class="keyword">this</span>.prev = prev;</span><br><span class="line">			<span class="keyword">this</span>.next = next;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		size = <span class="number">0</span>;</span><br><span class="line">		first = <span class="keyword">null</span>;</span><br><span class="line">		last = <span class="keyword">null</span>;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> size;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(E element)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> indexOf(element) != ELEMENT_NOT_FOUND;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E element)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		add(size,element);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> node(index).element;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">		Node&lt;E&gt; node = node(index);</span><br><span class="line">		E old = node.element;</span><br><span class="line">		node.element = element;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> old;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		rangeCheckForAdd(index);</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(index == size) &#123;</span><br><span class="line">			 </span><br><span class="line">			Node&lt;E&gt; oldLast = last;</span><br><span class="line">			last = <span class="keyword">new</span> Node&lt;&gt;(oldLast, element, <span class="keyword">null</span>);</span><br><span class="line">			<span class="keyword">if</span>(oldLast == <span class="keyword">null</span>) &#123;</span><br><span class="line">				first = last;</span><br><span class="line">			&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">				oldLast.next = last;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			Node&lt;E&gt; next = node(index);</span><br><span class="line">			Node&lt;E&gt; prev = next.prev;</span><br><span class="line">			Node&lt;E&gt; node = <span class="keyword">new</span> Node&lt;&gt;(prev,element,next);</span><br><span class="line">			next.prev = node;</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">if</span>(prev == <span class="keyword">null</span> ) &#123;</span><br><span class="line">				first = node;</span><br><span class="line">			&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">				prev.next = node;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		size ++;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		rangeCheck(index);</span><br><span class="line">		</span><br><span class="line">		Node&lt;E&gt; node = node(index);</span><br><span class="line">		Node&lt;E&gt; prev = node.prev;</span><br><span class="line">		Node&lt;E&gt; next = node.next;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(prev == <span class="keyword">null</span>) &#123;</span><br><span class="line">			first = next;</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			</span><br><span class="line">			prev.next = next;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(next == <span class="keyword">null</span>) &#123;</span><br><span class="line">			last = prev;</span><br><span class="line">			</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			</span><br><span class="line">			next.prev = prev;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		size --;</span><br><span class="line">		<span class="keyword">return</span> node.element;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(E element)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(element == <span class="keyword">null</span>) &#123;</span><br><span class="line">			Node&lt;E&gt; node = first;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">				<span class="keyword">if</span>(node.element == <span class="keyword">null</span>) <span class="keyword">return</span> i;</span><br><span class="line"></span><br><span class="line">				node = node.next;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			Node&lt;E&gt; node = first;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">				<span class="keyword">if</span>(element.equals(node.element)) <span class="keyword">return</span> i;</span><br><span class="line">				</span><br><span class="line">				node = node.next;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> ELEMENT_NOT_FOUND;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">private</span> Node&lt;E&gt; <span class="title">node</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">		</span><br><span class="line">		rangeCheck(index);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(index &lt; (size &gt;&gt; <span class="number">1</span>)) &#123;</span><br><span class="line">			</span><br><span class="line">			Node&lt;E&gt; node = first;</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">				node = node.next;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> node;</span><br><span class="line">			</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			</span><br><span class="line">			Node&lt;E&gt; node = last;</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i = size - <span class="number">1</span>; i &gt; index; i--) &#123;</span><br><span class="line">				node = node.prev;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">return</span> node;</span><br><span class="line">		&#125;	</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		StringBuilder string = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">		string.append(<span class="string">"size="</span>).append(size).append(<span class="string">", ["</span>);</span><br><span class="line">		Node&lt;E&gt; node = first;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">				string.append(<span class="string">", "</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			string.append(node.element);</span><br><span class="line">			</span><br><span class="line">			node = node.next;</span><br><span class="line">		&#125;</span><br><span class="line">		string.append(<span class="string">"]"</span>);</span><br><span class="line">		<span class="keyword">return</span> string.toString();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>Stack栈的实现</title>
    <url>/2020/02/01/Stack%E6%A0%88%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h2 id="栈模型（百度百科）"><a href="#栈模型（百度百科）" class="headerlink" title="栈模型（百度百科）"></a>栈模型（百度百科）</h2><p>栈（stack）又名堆栈，它是一种运算受限的线性表。限定仅在表尾进行插入和删除操作的线性表。这一端被称为栈顶，相对地，把另一端称为栈底。向一个栈插入新元素又称作进栈、入栈或压栈，它是把新元素放到栈顶元素的上面，使之成为新的栈顶元素；从一个栈删除元素又称作出栈或退栈，它是把栈顶元素删除掉，使其相邻的元素成为新的栈顶元素。<br><img src="http://images.cnitblog.com/blog/477717/201405/062119435888582.jpg"></p>
<a id="more"></a>
<h2 id="基本功能"><a href="#基本功能" class="headerlink" title="基本功能"></a>基本功能</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>; <span class="comment">// 元素的数量</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>; <span class="comment">// 是否为空</span></span><br><span class="line"><span class="function">E <span class="title">top</span><span class="params">()</span></span>; <span class="comment">// 获取栈顶元素</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(E element)</span></span>; <span class="comment">// 入栈</span></span><br><span class="line"><span class="function">E <span class="title">pop</span><span class="params">()</span></span>; <span class="comment">// 出栈</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>; <span class="comment">//清空栈</span></span><br></pre></td></tr></table></figure>



<h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><p>由于栈的结构跟顺序表和链表很像，这里采用Java中的ArrayList实现栈的功能，实现过程非常简单。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StackDemo</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//不采用继承ArrayList的方法，因为ArrayList中有许多功能在栈中并不需要。</span></span><br><span class="line">	<span class="keyword">private</span> ArrayList&lt;E&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		list.clear();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> list.size();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> list.isEmpty();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(E element)</span> </span>&#123;</span><br><span class="line">		list.add(element);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> E <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> list.remove(list.size() - <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> E <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> list.get(list.size() - <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>武汉加油，中国加油!</title>
    <url>/2020/01/30/%E6%AD%A6%E6%B1%89%E5%8A%A0%E6%B2%B9%EF%BC%8C%E4%B8%AD%E5%9B%BD%E5%8A%A0%E6%B2%B9/</url>
    <content><![CDATA[<center>向战斗在一线的所有医护人员致敬！！！</center>
<img src="http://n.sinaimg.cn/spider2020129/534/w800h534/20200129/665e-intiarp0394348.jpg">
<p style="font-size:13px; text-align: right;">图片来源网络</p>]]></content>
      <tags>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>LinkedList链表实现</title>
    <url>/2020/01/24/LinkedList%E9%93%BE%E8%A1%A8%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h2 id="链表与顺序表的异与同"><a href="#链表与顺序表的异与同" class="headerlink" title="链表与顺序表的异与同"></a>链表与顺序表的异与同</h2><p>由于链表所需的功能与顺序表基本相同,所以我采用继承、接口抽象类,模仿Java源代码的实现。</p>
<p>  ArrayList和LinkedList所需要实现的方法相同(如增删改查等),但是具体方法描述不同,故这里可以写一个接口MyList.java供它们调用。其中有些方法是可以供ArrayList和LinkedList公用的,但是接口只能声明方法，所以需要一个抽象类MyAbstractList.java,具体实现如下。</p>
<h4 id="MyList-java"><a href="#MyList-java" class="headerlink" title="MyList.java"></a>MyList.java</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyList</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ELEMENT_NOT_FOUND = -<span class="number">1</span>;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 清除所有元素</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 元素的数量</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 是否为空</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 是否包含某个元素</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(E element)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 添加元素到尾部</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(E element)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 获取index位置的元素</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function">E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 设置index位置的元素</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> 原来的元素ֵ</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function">E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 在index位置插入一个元素</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 删除index位置的元素</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function">E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 查看元素的索引</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(E element)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="MyAbstractList-java"><a href="#MyAbstractList-java" class="headerlink" title="MyAbstractList.java"></a>MyAbstractList.java</h4><p>ArrayList和LinkedList公有的成员变量size,公共的方法有:判断是否为空,是否包含某个元素,元素是否越界等,这些内容可以写在MyAbstractList.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAbstractList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">MyList</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> size;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(E element)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> indexOf(element) != ELEMENT_NOT_FOUND;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E element)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		add(size, element);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">outOfBounds</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"Index:"</span> + index + <span class="string">",Size:"</span> + size);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">rangeCheck</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= size) &#123;</span><br><span class="line">			outOfBounds(index);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">rangeCheckForAdd</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; size) &#123;</span><br><span class="line">			outOfBounds(index);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="具体功能的实现"><a href="#具体功能的实现" class="headerlink" title="具体功能的实现"></a>具体功能的实现</h2><h4 id="MyLinkedList-java"><a href="#MyLinkedList-java" class="headerlink" title="MyLinkedList.java"></a>MyLinkedList.java</h4><h4 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLinkedList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">MyAbstractList</span>&lt;<span class="title">E</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> Node&lt;E&gt; head;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">		</span><br><span class="line">		E element;</span><br><span class="line">		Node&lt;E&gt; next;</span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(E element, Node&lt;E&gt; next)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">this</span>.element = element;</span><br><span class="line">			<span class="keyword">this</span>.next = next;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">super</span>.finalize();</span><br><span class="line">			</span><br><span class="line">			System.out.println(<span class="string">"Student - finalize"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		size = <span class="number">0</span>;</span><br><span class="line">		head = <span class="keyword">null</span>;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> size;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(E element)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> indexOf(element) != ELEMENT_NOT_FOUND;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E element)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		add(size,element);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> node(index).element;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">		Node&lt;E&gt; node = node(index);</span><br><span class="line">		E old = node.element;</span><br><span class="line">		node.element = element;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> old;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span>(index == <span class="number">0</span>) &#123;</span><br><span class="line">			</span><br><span class="line">			head = <span class="keyword">new</span> Node&lt;&gt;(element, head);</span><br><span class="line">			</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			</span><br><span class="line">			Node&lt;E&gt; prev = node(index - <span class="number">1</span>);</span><br><span class="line">			prev.next = <span class="keyword">new</span> Node&lt;&gt;(element, prev.next);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		size ++;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		Node&lt;E&gt; node = head;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(index == <span class="number">0</span>) &#123;</span><br><span class="line">			head = head.next;</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			</span><br><span class="line">			Node&lt;E&gt; prev = node(index - <span class="number">1</span>);</span><br><span class="line">			node = prev.next;</span><br><span class="line">			prev.next = prev.next.next;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		size --;</span><br><span class="line">		<span class="keyword">return</span> node.element;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(E element)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(element == <span class="keyword">null</span>) &#123;</span><br><span class="line">			Node&lt;E&gt; node = head;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">				<span class="keyword">if</span>(node.element == <span class="keyword">null</span>) <span class="keyword">return</span> i;</span><br><span class="line"></span><br><span class="line">				node = node.next;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			Node&lt;E&gt; node = head;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">				<span class="keyword">if</span>(element.equals(node.element)) <span class="keyword">return</span> i;</span><br><span class="line">				</span><br><span class="line">				node = node.next;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> ELEMENT_NOT_FOUND;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">private</span> Node&lt;E&gt; <span class="title">node</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">		</span><br><span class="line">		rangeCheck(index);</span><br><span class="line">		</span><br><span class="line">		Node&lt;E&gt; node = head;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">			</span><br><span class="line">			node = node.next;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> node;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// size=3, [99, 88, 77]</span></span><br><span class="line">		StringBuilder string = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">		string.append(<span class="string">"size="</span>).append(size).append(<span class="string">", ["</span>);</span><br><span class="line">		Node&lt;E&gt; node = head;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">				string.append(<span class="string">", "</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			string.append(node.element);</span><br><span class="line">			</span><br><span class="line">			node = node.next;</span><br><span class="line">		&#125;</span><br><span class="line">		string.append(<span class="string">"]"</span>);</span><br><span class="line">		<span class="keyword">return</span> string.toString();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>ArrayList动态数组实现</title>
    <url>/2020/01/20/ArrayList%E9%A1%BA%E5%BA%8F%E8%A1%A8%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h2 id="基本需要实现的功能"><a href="#基本需要实现的功能" class="headerlink" title="基本需要实现的功能"></a>基本需要实现的功能</h2><p>MyArrayList.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>; <span class="comment">// 元素的数量  </span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>; <span class="comment">// 是否为空  </span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(E element)</span></span>; <span class="comment">// 是否包含某个元素  </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(E element)</span></span>; <span class="comment">// 添加元素到最后面  </span></span><br><span class="line"><span class="function">E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>; <span class="comment">// 返回index位置对应的元素 </span></span><br><span class="line"><span class="function">E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span></span>; <span class="comment">// 设置index位置的元素  </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span></span>; <span class="comment">// 往index位置添加元素 </span></span><br><span class="line"><span class="function">E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span></span>; <span class="comment">// 删除index位置对应的元素 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(E element)</span></span>; <span class="comment">// 查看元素的位置 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>; <span class="comment">// 清除所有元素</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>
<h3 id="我的具体实现方法"><a href="#我的具体实现方法" class="headerlink" title="我的具体实现方法"></a>我的具体实现方法</h3><h4 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h4><p>基本需要用到的变量有数组的长度(size),数组(elements[i]),DEFAULT_CAPACITY表示申请时默认分配给数组10个存储空间,ELEMENT_NOT_FOUND表示找不到元素时返回的值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"><span class="keyword">private</span> E[] elements;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ELEMENT_NOT_FOUND = -<span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<h4 id="Java中常见的泛型"><a href="#Java中常见的泛型" class="headerlink" title="Java中常见的泛型"></a>Java中常见的泛型</h4><p>这里说明一下，定义数组时使用E[] elements ,E时java中的泛型,使用泛型可以使该动态数组存放各种类型的元素，十分实用。</p>
<p>E - Element (在集合中使用，因为集合中存放的是元素)<br>T - Type（Java 类）<br>K - Key（键）<br>V - Value（值）<br>N - Number（数值类型）<br>？ -  表示不确定的java类型</p>
<h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><p>这里采用的方式时：若用户申请的容量小于默认的数组大小(10)时，统一按照默认大小new一个数组。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyArrayList</span><span class="params">(<span class="keyword">int</span> capaticy)</span> </span>&#123;</span><br><span class="line">		capaticy = (capaticy &lt; DEFAULT_CAPACITY) ? DEFAULT_CAPACITY : capaticy;</span><br><span class="line">		elements = (E[])<span class="keyword">new</span> Object[capaticy];</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyArrayList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">this</span>(DEFAULT_CAPACITY);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="动态数组中基本方法实现"><a href="#动态数组中基本方法实现" class="headerlink" title="动态数组中基本方法实现"></a>动态数组中基本方法实现</h4><p>返回动态数组的size</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 元素的数量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>判断size == 0是否为真</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 是否为空</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>改写toString()方法实现数组的打印功能</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	StringBuilder string = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">	string.append(<span class="string">"size="</span>).append(size).append(<span class="string">", ["</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(i != <span class="number">0</span>) &#123;</span><br><span class="line">			string.append(<span class="string">", "</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		string.append(elements[i]);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	string.append(<span class="string">"]"</span>);</span><br><span class="line">	<span class="keyword">return</span> string.toString();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一些补充功能，检测用户数组索引是否越界</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">outOfBounds</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"Index:"</span>+index+<span class="string">",Size:"</span>+size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rangeCheck</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt;= size) &#123;</span><br><span class="line">		outOfBounds(index);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rangeCheckForAdd</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt; size) &#123;</span><br><span class="line">		outOfBounds(index);		&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h4 id="动态数组的增删改查实现"><a href="#动态数组的增删改查实现" class="headerlink" title="动态数组的增删改查实现"></a>动态数组的增删改查实现</h4><p>增加元素</p>
<p>增加元素时，判断数组空间是否足够，确保数组容量不小于size+1，若数组容量不足，则重新申请一个容量为原来容量1.5倍的数组(java中的源代码也是设置了1.5倍，貌似ios是1.6倍)，由于浮点数运算较复杂，故采用newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1);的运算方式,并将原来数组的元素复制到新数组,并将原数组的地址指向新数组elements = newElements,由于java有垃圾回收机制,原来数组所占的内存会被释放掉。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 添加元素到最后面</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E element)</span> </span>&#123;</span><br><span class="line">	add(size,element);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 往index位置添加元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index,E element)</span> </span>&#123;</span><br><span class="line">	rangeCheckForAdd(index);</span><br><span class="line">	</span><br><span class="line">	ensureCapacity(size + <span class="number">1</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = size; i &gt; index; i--) &#123;</span><br><span class="line">		elements[i] = elements[i - <span class="number">1</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	elements[index] = element;</span><br><span class="line">	size++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> oldCapacity = elements.length;</span><br><span class="line">	<span class="keyword">if</span>(oldCapacity &gt;= capacity) <span class="keyword">return</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//新容量为1.5倍</span></span><br><span class="line">	<span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">	E[] newElements = (E[]) <span class="keyword">new</span> Object[newCapacity];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">		newElements[i] = elements[i];</span><br><span class="line">	&#125;</span><br><span class="line">	elements = newElements;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//System.out.println(oldCapacity+"扩容为："+newCapacity);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>删除元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 删除index位置对应的元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">	rangeCheck(index);</span><br><span class="line"></span><br><span class="line">	E old = elements[index];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = index; i &lt; size; i++) &#123;</span><br><span class="line">		elements[i] = elements[i+<span class="number">1</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	size --;</span><br><span class="line">	</span><br><span class="line">	elements[size] = <span class="keyword">null</span>;</span><br><span class="line">	<span class="keyword">return</span> old;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 清除所有元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">		elements[i] = <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	size = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>修改元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 设置index位置的元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">	rangeCheck(index);</span><br><span class="line">	</span><br><span class="line">	E old = elements[index];</span><br><span class="line">	elements[index] = element;</span><br><span class="line">	<span class="keyword">return</span> old;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>查找元素</p>
<p>注意比较元素是否相同时应使用equals()方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 是否包含某个元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span> <span class="params">(E element)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> indexOf(element) != ELEMENT_NOT_FOUND;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 返回index位置对应的元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	rangeCheck(index);</span><br><span class="line">	<span class="keyword">return</span> elements[index];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 查看元素的位置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(E element)</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span> (element == <span class="keyword">null</span>) &#123;  <span class="comment">// 1</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (elements[i] == <span class="keyword">null</span>) <span class="keyword">return</span> i; </span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (element.equals(elements[i])) <span class="keyword">return</span> i; <span class="comment">// n</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ELEMENT_NOT_FOUND;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>斐波那契数列第N项</title>
    <url>/2020/01/20/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97%E7%AC%ACN%E9%A1%B9/</url>
    <content><![CDATA[<h2 id="斐波那契数列简介"><a href="#斐波那契数列简介" class="headerlink" title="斐波那契数列简介"></a>斐波那契数列简介</h2><p>斐波那契数列（Fibonacci sequence），又称黄金分割数列、因数学家列昂纳多·斐波那契（Leonardoda Fibonacci）以兔子繁殖为例子而引入，故又称为“兔子数列”，指的是这样一个数列：1、1、2、3、5、8、13、21、34、……在数学上，斐波那契数列以如下被以递推的方法定义：F(1)=1，F(2)=1, F(n)=F(n-1)+F(n-2)(n>=3，n∈N*)</p>
<a id="more"></a>
## 递归求法(不推荐，复杂度约为2^n)
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fib1</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(n &lt;= <span class="number">1</span>) <span class="keyword">return</span> n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> fib1(n-<span class="number">1</span>)+fib1(n-<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="使用For循环"><a href="#使用For循环" class="headerlink" title="使用For循环"></a>使用For循环</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fib2</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span>(n &lt;= <span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">int</span> first = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">int</span> second = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">			second = first + second;</span><br><span class="line">			first = second - first;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> second;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h2 id="使用公式求解"><a href="#使用公式求解" class="headerlink" title="使用公式求解"></a>使用公式求解</h2><img src="https://gss0.bdstatic.com/-4o3dSag_xI4khGkpoWK1HF6hhy/baike/pic/item/503d269759ee3d6db9e6f1e046166d224f4adefd.jpg">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fib3</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">double</span> c = Math.sqrt(<span class="number">5</span>);</span><br><span class="line">		<span class="keyword">return</span> (<span class="keyword">int</span>)((Math.pow((<span class="number">1</span>+c)/<span class="number">2</span>,n) - Math.pow((<span class="number">1</span>-c)/<span class="number">2</span>, n))/c);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h2 id="测试运行时间"><a href="#测试运行时间" class="headerlink" title="测试运行时间"></a>测试运行时间</h2><img src="/images/fib/fib1.jpg">
<img src="/images/fib/fib2.jpg">
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>纪念博客搭建成功</title>
    <url>/2019/11/19/%E7%BA%AA%E5%BF%B5%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%88%90%E5%8A%9F2019-11-19/</url>
    <content><![CDATA[<h2 id="LucasMaii第一篇文章鸭"><a href="#LucasMaii第一篇文章鸭" class="headerlink" title="LucasMaii第一篇文章鸭"></a>LucasMaii第一篇文章鸭</h2><p>学了几天，终于搭建出属于自己的博客，尽管用的是网络上流行的Next主题模板，但是没有广告我就很开心，也许这就是学习前端的乐趣吧！你们要不要也试试搭建属于自己的网站，我是使用Github+Hexo来搭建的，下面是我这次搭建博客的笔记。</p>
<h2 id="如何搭建自己的博客"><a href="#如何搭建自己的博客" class="headerlink" title="如何搭建自己的博客"></a>如何搭建自己的博客</h2><h3 id="1-下载Node-js"><a href="#1-下载Node-js" class="headerlink" title="1.    下载Node.js"></a>1.    下载Node.js</h3><p>下载网站<a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a></p>
<img src="/images/1/node.png" class="full-image" />
<a id="more"></a>
打开cmd输入node -v查看版本号

<img src="/images/1/checknode.png" class="full-image" />


<p>显示版本号表示安装成功！！！</p>
<h3 id="2-注册Github"><a href="#2-注册Github" class="headerlink" title="2.    注册Github"></a>2.    注册Github</h3><p>这个不会就别学了(滑稽)<br><img src="/images/1/github.png"></p>
<h3 id="3-下载Git-For-Win"><a href="#3-下载Git-For-Win" class="headerlink" title="3.    下载Git For Win"></a>3.    下载Git For Win</h3><p>怎么下载，怎么安装百度上非常的详细！！！<br>安装完就可以使用Git里面的命令啦！</p>
<img src="/images/1/gitforwin.png" class="" />

<h3 id="4-配置GithubSHH"><a href="#4-配置GithubSHH" class="headerlink" title="4.    配置GithubSHH"></a>4.    配置GithubSHH</h3><p>命令ssh-keygen -t rsa -C “你注册的邮箱”<br><img src="/images/1/gitssh.png"><br>之后一直按enter键，表示不设置密码</p>
<p>用记事本打开ssh密钥id_rsa.pub,将密钥复制到GitHub上Settings –&gt;&gt; SSH and GPG keys 中的SSH框框内<br><img src="/images/1/ssh_pw.png" class="full-image" ><br><img src="/images/1/sshkey.png" class="full-image" ></p>
<h3 id="5-安装hexo"><a href="#5-安装hexo" class="headerlink" title="5.    安装hexo"></a>5.    安装hexo</h3><img src="/images/1/installhexo.png">
这是官网上给的命令
<img src="/images/1/hexo.png">
打开cmd命令行，输入上图指令进行hexo安装操作，
安装成功后，输入hexo – v查看版本号检验是否安装成功。
<br/>
找一个位置创建你的Blog文件夹，然后从cmd命令行进入文件夹
<img src="/images/1/cdblog.png">
或者直接鼠标右键，Git Bash Here
<br/>
 接下来进行博客初始化操作
 hexo init +”自己命名博客文件夹”
<img src="/images/1/hexoinit.png">
初始化成功！此时发现blog目录下已经下载好相应的博客初始文件。
<img src="/images/1/blogcategories.png">
Cd MyBlog进入博客目录，使用命令npm install 安装相关支持
接下来就是最后一条指令啦！
Hexo server
<img src="/images/1/hexoserver.png">
运行后，你的博客网站将运行到本地服务器上面，打开浏览器输入以上图片中的地址 http://localhost:4000 即可进入自己的博客网站(注意看端口号：如图中4000)
<img src="/images/1/hexoindex.png">
如果你不想用这个4000端口，例如可以使用命令hexo s -p 5555亦可
<img src="/images/1/5555.png">

<h3 id="6-安装sublime-vscode软件便于查看代码"><a href="#6-安装sublime-vscode软件便于查看代码" class="headerlink" title="6.    安装sublime/vscode软件便于查看代码"></a>6.    安装sublime/vscode软件便于查看代码</h3><p>这个小伙伴们自己按照自己喜欢的编辑器选择，我这里选用sublime Text作为例子。<br>用sublime打开你的博客文件夹，并打开配置文件_config.yml<br><img src="/images/1/sublime.png"><br>修改如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Site</span></span><br><span class="line">title: 此处修改为你网站状态栏上显示的名称</span><br><span class="line">subtitle: <span class="string">''</span></span><br><span class="line">description: <span class="string">''</span></span><br><span class="line">keywords:</span><br><span class="line">author: 作者名称</span><br><span class="line">language: 网站语言，设置为中文填 zh-CN</span><br><span class="line">timezone: <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class="line">url: 此处填你的博客网址，与你的GitHub账号同名，如我的博客网址是https://LucasMaii.github.io </span><br><span class="line">root: /</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">permalink_defaults:</span><br><span class="line">pretty_urls:</span><br><span class="line">  trailing_index: <span class="literal">true</span> <span class="comment"># Set to false to remove trailing index.html from permalinks</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory</span></span><br><span class="line">source_dir: <span class="built_in">source</span></span><br><span class="line">public_dir: public</span><br><span class="line">tag_dir: tags</span><br><span class="line">archive_dir: archives</span><br><span class="line">category_dir: categories</span><br><span class="line">code_dir: downloads/code</span><br><span class="line">i18n_dir: :lang</span><br><span class="line">skip_render:</span><br><span class="line"></span><br><span class="line"><span class="comment"># Writing</span></span><br><span class="line">new_post_name: :title.md <span class="comment"># File name of new posts</span></span><br><span class="line">default_layout: post</span><br><span class="line">titlecase: <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></span><br><span class="line">external_link:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span> <span class="comment"># Open external links in new tab</span></span><br><span class="line">  field: site <span class="comment"># Apply to the whole site</span></span><br><span class="line">  exclude: <span class="string">''</span></span><br><span class="line">filename_case: 0</span><br><span class="line">render_drafts: <span class="literal">false</span></span><br><span class="line">post_asset_folder: <span class="literal">false</span></span><br><span class="line">relative_link: <span class="literal">false</span></span><br><span class="line">future: <span class="literal">true</span></span><br><span class="line">highlight:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  line_number: <span class="literal">true</span></span><br><span class="line">  auto_detect: <span class="literal">false</span></span><br><span class="line">  tab_replace: <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Home page setting</span></span><br><span class="line"><span class="comment"># path: Root path for your blogs index page. (default = '')</span></span><br><span class="line"><span class="comment"># per_page: Posts displayed per page. (0 = disable pagination)</span></span><br><span class="line"><span class="comment"># order_by: Posts order. (Order by date descending by default)</span></span><br><span class="line">index_generator:</span><br><span class="line">  path: <span class="string">''</span></span><br><span class="line">  per_page: 10</span><br><span class="line">  order_by: -date</span><br><span class="line"></span><br><span class="line"><span class="comment"># Category &amp; Tag</span></span><br><span class="line">default_category: uncategorized</span><br><span class="line">category_map:</span><br><span class="line">tag_map:</span><br><span class="line"></span><br><span class="line"><span class="comment"># Metadata elements</span></span><br><span class="line"><span class="comment">## https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta</span></span><br><span class="line">meta_generator: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Date / Time format</span></span><br><span class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></span><br><span class="line"><span class="comment">## You can customize the date format as defined in</span></span><br><span class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line">date_format: YYYY-MM-DD</span><br><span class="line">time_format: HH:mm:ss</span><br><span class="line"><span class="comment">## Use post's date for updated date unless set in front-matter</span></span><br><span class="line">use_date_for_updated: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pagination</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line">per_page: 10</span><br><span class="line">pagination_dir: page</span><br><span class="line"></span><br><span class="line"><span class="comment"># Include / Exclude file(s)</span></span><br><span class="line"><span class="comment">## include:/exclude: options only apply to the 'source/' folder</span></span><br><span class="line">include:</span><br><span class="line">exclude:</span><br><span class="line">ignore:</span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line">theme: landscape 这里就是更换主题的地方了，例如我使用的是next主题，小伙伴们可以自己摸索</span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: 这里填git</span><br><span class="line">这里补充</span><br><span class="line">  repo：你在github上存放博客的仓库的地址，比如我的是https://github.com/LucasMaii/LucasMaii.github.io.git </span><br><span class="line">  branch:master</span><br></pre></td></tr></table></figure>

<h3 id="7-发布Hexo到GitHub"><a href="#7-发布Hexo到GitHub" class="headerlink" title="7.    发布Hexo到GitHub"></a>7.    发布Hexo到GitHub</h3><p>上一部部署工作做好后，接下来打开命令行，进入MyBlog目录，使用Hexo g + Hexo d 命令将博客发布到网络上，并尝试用网址登录。<br><img src="/images/1/hexog.png"><br><img src="/images/1/hexod.png"><br>这是我的博客地址<a href="https://lucasmaii.github.io/">https://lucasmaii.github.io/</a><br>输入网址就能进入自己的网站，是不是很开心呢！<br><img src="/images/1/memoryhexo.png"></p>
<h3 id="8-以hexo的next主题为例使用"><a href="#8-以hexo的next主题为例使用" class="headerlink" title="8.    以hexo的next主题为例使用"></a>8.    以hexo的next主题为例使用</h3><p>我们只需要在hexo上搜索喜欢的主题，把主题包下载好，放到博客的themes目录下，可以改个名字方便设置。<br><img src="/images/1/hexotheme.png"><br>例如我改成next，在配置文件中将theme：landscape 改成 next就可以切换到next主题啦。</p>
<p>修改代码</p>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line">theme: next</span><br></pre></td></tr></table></figure>
<p>这个教程就告一段落啦，至于如何写博客，如何设置动画，添加标签等留给你们自行摸索了，也希望你们感受到这其中的乐趣。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>分享</tag>
        <tag>导航</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/11/19/%E5%BC%80%E5%8F%91%E6%96%87%E6%A1%A3/hello-world/</url>
    <content><![CDATA[<!-- Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues). -->

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
